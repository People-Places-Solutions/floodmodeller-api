name: Build (PyPI)

on:
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  PYPI_TIMEOUT: 600

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.extract_version.outputs.package_version }}

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: pip
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine

    - name: Extract version
      id: extract_version
      run: |
        set -eo pipefail
        PACKAGE_VERSION=$(python -c 'from floodmodeller_api.version import __version__; print(__version__)')
        echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

    - name: Build the package
      run: python -m build

    - name: Publish the package to PyPI
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

    - name: Create GitHub Release
      id: create_release
      uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        commit: main
        tag: v${{ steps.extract_version.outputs.package_version }}
        generateReleaseNotes: true
        artifacts: dist/*
        draft: true

  install:
    needs: build
    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        OS: [ubuntu-latest, windows-latest]

    steps:
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install the package from PyPI
      run: |
        end=$((SECONDS+${{ env.PYPI_TIMEOUT }}))
        while true; do
          if pip install "floodmodeller-api==${{ needs.build.outputs.package_version }}"; then
            break
          fi
          if [ $SECONDS -ge $end ]; then
            echo "Timed out waiting for the package to be available."
            exit 1
          fi
          echo "Waiting for the package to be available..."
          sleep 10
        done
      shell: bash

    - name: Export path to libs (Ubuntu)
      if: matrix.OS == 'ubuntu-latest'
      run: |
        LIB_PATH=$(python -c "from pathlib import Path; import floodmodeller_api; print(Path(floodmodeller_api.__file__).parent / 'libs')")
        echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${LIB_PATH}" >> $GITHUB_ENV

    - name: Run tests
      run: pytest --pyargs floodmodeller_api
