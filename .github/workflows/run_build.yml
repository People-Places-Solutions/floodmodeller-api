name: Build

on:
  push:
    branches: [ main ]
    paths: [ "floodmodeller_api/version.py" ]

env:
  PYTHON_VERSION: "3.11"
  PYPI_PAUSE: 120

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.extract_version.outputs.package_version }}

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine

    - name: Extract version
      id: extract_version
      run: |
        set -eo pipefail
        PACKAGE_VERSION=$(python -c 'from floodmodeller_api.version import __version__; print(__version__)')
        echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

    - name: Build the package
      run: python -m build

    - name: Publish the package to TestPyPI
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: twine upload --repository testpypi dist/*

  install:
    needs: build
    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        OS: [ubuntu-latest, windows-latest]

    steps:
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Pause before installation (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sleep ${{ env.PYPI_PAUSE }}
  
    - name: Pause before installation (Windows)
      if: matrix.os == 'windows-latest'
      run: Start-Sleep -Seconds ${{ env.PYPI_PAUSE }}

    - name: Install the package from TestPyPI
      run: >
        pip install
        -i https://test.pypi.org/simple/
        --extra-index-url https://pypi.org/simple
        "floodmodeller-api==${{ needs.build.outputs.package_version }}"

    - name: Export path to libs (Ubuntu)
      if: matrix.OS == 'ubuntu-latest'
      run: |
        LIB_PATH=$(python -c "from pathlib import Path; import floodmodeller_api; print(Path(floodmodeller_api.__file__).parent / 'libs')")
        echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${LIB_PATH}" >> $GITHUB_ENV

    - name: Run tests
      run: pytest --pyargs floodmodeller_api
