// devontainer json schema https://containers.dev/implementors/json_reference/
// customisations: https://containers.dev/supporting
// This uses github's default image which has tdevtools for python and automatically installs the requirements.txt file post build
{
  "image": "mcr.microsoft.com/devcontainers/universal:2",
  "name": "Get Started!",
  "customizations": {
    "codespaces": {
       "openFiles": ["demo/01-get-started.ipynb"]
    },
     "vscode": {
      // Add the IDs of extensions you want installed when the container is created.  
      // Python and jupyter
      "extensions": ["ms-python.python","ms-toolsai.jupyter"],
      // VS Code settings
    "settings": {
      // Allows you to run `code *.md` and open a preview of a markdown file instead of the raw text
      "workbench.editorAssociations": {
        "*.md": "vscode.markdown.preview.editor",
        "*.ipynb": "jupyter-notebook"
      }
    }
  }},
  // Hoping this will tell vs code to wait for extensions to be installed before opening files
  "waitFor": "postCreateCommand",
  // This installs the flood modeller dependencies and attaches the path so that you can do import floodmodeller_api like any installed library
  // This means you don't need to worry about directory scoping rules when importing
  "postCreateCommand": "python setup.py develop"
  //"postStartCommand": "code demo/01-get-started.ipynb"
}